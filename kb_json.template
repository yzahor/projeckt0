{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based on the region in which the stack is run. This example creates an EC2 security group for the instance to give you SSH access. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",
  "Parameters": {
    "Label": {
      "Description": "The label to apply to the servers.",
      "Type": "String",
      "MinLength": "2",
      "MaxLength": "25",
      "AllowedPattern": "[_a-zA-Z0-9]*",
      "ConstraintDescription": "Maximum length of the Label parameter may not exceed 25 characters and may only contain letters, numbers and underscores."
    },
    "KeyPairName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "free_tier_keys",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "InstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t1.micro",
        "t2.nano",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c1.medium",
        "c1.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "g2.2xlarge",
        "g2.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "cr1.8xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "ImageId": {
      "Description": "EC2 Image ID",
      "Type": "String",
      "Default": "ami-40142d25",
      "AllowedPattern": "ami-[a-f0-9]{8}",
      "ConstraintDescription": "Must be ami-XXXXXXXX (where X is a hexadecimal digit)"
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },
  "Resources": {
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access via port 22",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ]
      }
    },
    "ASGKibana": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": [
          "us-east-2a"
        ],
        "HealthCheckType": "EC2",
        "LaunchConfigurationName": {
          "Ref": "LaunchConfigKBN"
        },
        "MinSize": 1,
        "MaxSize": 5,
        "NotificationConfiguration": {
          "TopicARN": {
            "Ref": "EmailSNSTopic"
          },
          "NotificationTypes": [
            "autoscaling:EC2_INSTANCE_LAUNCH",
            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling:EC2_INSTANCE_TERMINATE",
            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Kibana",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Label",
            "Value": "",
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "ASGElasticsearch": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": [
          "us-east-2a"
        ],
        "HealthCheckType": "EC2",
        "LaunchConfigurationName": {
          "Ref": "LaunchConfigELS"
        },
        "MinSize": 1,
        "MaxSize": 5,
        "NotificationConfiguration": {
          "TopicARN": {
            "Ref": "EmailSNSTopic"
          },
          "NotificationTypes": [
            "autoscaling:EC2_INSTANCE_LAUNCH",
            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling:EC2_INSTANCE_TERMINATE",
            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Elasticsearch",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Label",
            "Value": "",
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "EmailSNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": "yzaho@softserveinc.com",
            "Protocol": "email"
          }
        ]
      }
    },
    "LaunchConfigKBN": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "InstallAndRun": [
              "Install",
              "Configure"
            ]
          },
          "Install": {
            "packages": {
              "yum": {
                "mysql": [

                ],
                "mysql-server": [

                ],
                "mysql-libs": [

                ],
                "httpd": [

                ],
                "php": [

                ],
                "php-mysql": [

                ]
              }
            },
            "/etc/cfn/cfn-hup.conf": {
              "content": {
                "Fn::Join": [
                  "",
                  [
                    "[main]\n",
                    "stack=",
                    {
                      "Ref": "AWS::StackId"
                    },
                    "\n",
                    "region=",
                    "us-east-1",
                    "\n"
                  ]
                ]
              },
              "mode": "000400",
              "owner": "root",
              "group": "root"
            },
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
              "content": {
                "Fn::Join": [
                  "",
                  [
                    "[cfn-auto-reloader-hook]\n",
                    "triggers=post.update\n",
                    "path=Resources.LaunchConfigKBN.Metadata.AWS::CloudFormation::Init\n",
                    "action=/opt/aws/bin/cfn-init -v ",
                    "         --stack ",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "         --resource LaunchConfigKBN ",
                    "         --configsets InstallAndRun ",
                    "         --region ",
                    "us-east-1",
                    "\n",
                    "runas=root\n"
                  ]
                ]
              },
              "mode": "000400",
              "owner": "root",
              "group": "root"
            }
          },
          "services": {
            "sysvinit": {
              "mysqld": {
                "enabled": "true",
                "ensureRunning": "true"
              },
              "httpd": {
                "enabled": "true",
                "ensureRunning": "true"
              },
              "cfn-hup": {
                "enabled": "true",
                "ensureRunning": "true",
                "files": [
                  "/etc/cfn/cfn-hup.conf",
                  "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                ]
              }
            }
          },
          "Configure": {
            "commands": {
              "01_set_mysql_root_password": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "mysqladmin -u root password '",
                      {
                        "Ref": "DBRootPassword"
                      },
                      "'"
                    ]
                  ]
                },
                "test": {
                  "Fn::Join": [
                    "",
                    [
                      "$(mysql ",
                      {
                        "Ref": "DBName"
                      },
                      " -u root --password='",
                      {
                        "Ref": "DBRootPassword"
                      },
                      "' >/dev/null 2>&1 </dev/null); (( $? != 0 ))"
                    ]
                  ]
                }
              },
              "02_create_database": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "mysql -u root --password='",
                      {
                        "Ref": "DBRootPassword"
                      },
                      "' < /tmp/setup.mysql"
                    ]
                  ]
                },
                "test": {
                  "Fn::Join": [
                    "",
                    [
                      "$(mysql ",
                      {
                        "Ref": "DBName"
                      },
                      " -u root --password='",
                      {
                        "Ref": "DBRootPassword"
                      },
                      "' >/dev/null 2>&1 </dev/null); (( $? != 0 ))"
                    ]
                  ]
                }
              }
            }
          }
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT5M"
        }
      },
      "Properties": {
        "ImageId": "ami-40142d25",
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "InstanceMonitoring": "false",
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "yum update -y aws-cfn-bootstrap\n",
                "# Install the files and packages from the metadata\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource WebServerInstance ",
                "         --configsets InstallAndRun ",
                "         --region ",
                "us-east-1",
                "\n",
                "# Signal the status from cfn-init\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource WebServerInstance ",
                "         --region ",
                "us-east-1",
                "\n"
              ]
            ]
          }
        }
      }
    },
    "LaunchConfigELS": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": "ami-40142d25",
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "InstanceMonitoring": "false",
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/usr/bin/env bash\n",
                "\n",
                "sudo yum -y update\n",
                "sudo yum -y install oracle-java8-installer aws-cfn-bootstrap\n",
                "\n",
                "# sudo apt install -y aws-cfn-bootstrap\n",
                "# sudo /opt/aws/bin/cfn-signal -e 0 --stack, {\"Ref\": \"AWS::StackName\"}, \n"
              ]
            ]
          }
        }
      }
    }
  }
}
